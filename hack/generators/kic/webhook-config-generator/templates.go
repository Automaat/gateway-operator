package main

import (
	admregv1 "k8s.io/api/admissionregistration/v1"
)

type singleVersionTemplateData struct {
	VersionConstraint          string
	SanitizedVersionConstraint string
	Webhooks                   []admregv1.ValidatingWebhook
}

var generateValidatingWebhookConfigurationForKICVersionTemplate = `// This file is generated by /hack/generators/kic/webhook-config-generator. DO NOT EDIT.

package validatingwebhookconfig

import (
	"github.com/samber/lo"
	admregv1 "k8s.io/api/admissionregistration/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// GenerateValidatingWebhookConfigurationForKIC_{{ .SanitizedVersionConstraint }} generates a ValidatingWebhookConfiguration for KIC {{ .VersionConstraint }}.
func GenerateValidatingWebhookConfigurationForKIC_{{ .SanitizedVersionConstraint }}(name string, clientConfig admregv1.WebhookClientConfig) *admregv1.ValidatingWebhookConfiguration {
	return &admregv1.ValidatingWebhookConfiguration{
		ObjectMeta: metav1.ObjectMeta{
			Name: name,
		},
		Webhooks: []admregv1.ValidatingWebhook{
			{{- range .Webhooks }}
			{
				Name: "{{ .Name }}",
				ClientConfig: clientConfig,
				// We're using 'Ignore' failure policy to avoid issues with modifying resources when webhook-backing
				// Deployments (ControlPlane and DataPlane) are not available.
				// See https://github.com/Kong/gateway-operator/issues/1564 for more details.
				FailurePolicy: lo.ToPtr(admregv1.Ignore),
				MatchPolicy: lo.ToPtr(admregv1.MatchPolicyType("{{ .MatchPolicy }}")),
				SideEffects:   lo.ToPtr(admregv1.SideEffectClass("{{ .SideEffects }}")),
				AdmissionReviewVersions: []string{
					{{- range .AdmissionReviewVersions }}
					"{{ . }}",
					{{- end }}
				},
				Rules: []admregv1.RuleWithOperations{
					{{- range .Rules }}
					{
						Rule: admregv1.Rule{
							APIGroups: []string{
								{{- range .APIGroups }}
								"{{ . }}",
								{{- end }}
							},
							APIVersions: []string{
								{{- range .APIVersions }}
								"{{ . }}",
								{{- end }}
							},
							Resources: []string{
								{{- range .Resources }}
								"{{ . }}",
								{{- end }}
							},
						},
						Operations: []admregv1.OperationType{
							{{- range .Operations }}
							"{{ . }}",
							{{- end }}
						},
					},
					{{- end }}
				},
			},
			{{- end }}
		},
	}
}
`

type masterTemplateData struct {
	Constraints map[string]string // VersionConstraint -> SanitizedVersionConstraint
}

var generateValidatingWebhookConfigurationForKICVersionMasterTemplate = `// This file is generated by /hack/generators/kic/webhook-config-generator. DO NOT EDIT.

package resources

import (
	"fmt"

	"github.com/Masterminds/semver"
	webhook "github.com/kong/gateway-operator/pkg/utils/kubernetes/resources/validatingwebhookconfig"
	admregv1 "k8s.io/api/admissionregistration/v1"
	pkgapisadmregv1 "k8s.io/kubernetes/pkg/apis/admissionregistration/v1"
)

// GenerateValidatingWebhookConfigurationForControlPlane generates a ValidatingWebhookConfiguration for a control plane
// based on the control plane version. It also overrides all webhooks' client configurations with the provided service
// details.
func GenerateValidatingWebhookConfigurationForControlPlane(webhookName string, cpVersion *semver.Version, clientConfig admregv1.WebhookClientConfig) (*admregv1.ValidatingWebhookConfiguration, error) {
	if webhookName == "" {
		return nil, fmt.Errorf("webhook name is required")
	}
	if cpVersion == nil {
		return nil, fmt.Errorf("control plane version is required")
	}

	var (
		constraint *semver.Constraints
		err        error
	)
	{{ range $constraint, $suffix := .Constraints}}
	constraint, err = semver.NewConstraint("{{ $constraint }}")
	if err != nil {
		return nil, err
	}
	if constraint.Check(cpVersion) {
		cfg := webhook.GenerateValidatingWebhookConfigurationForKIC_{{ $suffix }}(webhookName, clientConfig)
		pkgapisadmregv1.SetObjectDefaults_ValidatingWebhookConfiguration(cfg)
		LabelObjectAsControlPlaneManaged(cfg)
		return cfg, nil
	}	
	{{ end}}

	return nil, ErrControlPlaneVersionNotSupported 
}
`
